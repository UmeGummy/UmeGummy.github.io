{"version":3,"sources":["views/commponents/Tweet.js","views/commponents/Timeline.jsx","views/commponents/TweetInput.jsx","App.js","reportWebVitals.js","index.js"],"names":["Tweet","props","React","useState","liked","setLiked","className","icon","displayName","accountName","content","onClick","callBackFunc","Timeline","tweetList","tweets","map","tw","id","TweetInput","textareaRef","useRef","sendTweet","useCallback","current","value","addTweet","Date","getTime","ref","App","setTweets","tweet","prev","useEffect","getAxiosDemo","a","axios","get","res","console","log","data","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PA6BeA,EA1BD,SAACC,GAEb,MAA0BC,IAAMC,UAAS,GAAzC,mBAAOC,EAAP,KAAcC,EAAd,KAMA,OACE,sBAAKC,UAAU,QAAf,UACE,qBAAKA,UAAU,iBAAf,SAAkCL,EAAMM,OACxC,sBAAKD,UAAU,iBAAf,UACE,sBAAKA,UAAU,iBAAf,UACE,sBAAMA,UAAU,cAAhB,SAAgCL,EAAMO,cACtC,uBAAMF,UAAU,cAAhB,cAAiCL,EAAMQ,kBAEzC,qBAAKH,UAAU,UAAf,SAA2BL,EAAMS,UACjC,qBAAKJ,UAAU,cAAf,SACE,sBAAMK,QAdK,SAACC,GAClBP,GAAU,kBAAOD,MAaX,SAA+BA,EAAQ,SAAM,oBCCxCS,EApBE,SAACZ,GACd,IAAMa,EAAYb,EAAMc,OAAOC,KAAI,SAACC,GAC/B,OACG,cAAC,EAAD,CAEIV,KAAOU,EAAGV,KACVC,YAAcS,EAAGT,YACjBC,YAAcQ,EAAGR,YACjBC,QAAUO,EAAGP,SAJPO,EAAGC,OASrB,OACI,qBAAKZ,UAAU,WAAf,SAA4BQ,KCiBrBK,EA/BI,SAAClB,GAEhB,IAAMmB,EAAclB,IAAMmB,OAAO,MAE3BC,EAAYpB,IAAMqB,aAAY,WAChC,GAAIH,EAAYI,QAAS,CACrB,GAAkC,KAA9BJ,EAAYI,QAAQC,MAAc,OACtCxB,EAAMyB,SAAS,CACXR,IAAI,IAAIS,MAAOC,UACfrB,KAAM,2BACNC,YAAa,2BACbC,YAAa,WACbC,QAASU,EAAYI,QAAQC,QAGrCL,EAAYI,QAAQC,MAAQ,KAC7B,CAACL,EAAYI,QAASvB,EAAMyB,WAE/B,OACI,sBAAKpB,UAAU,cAAf,UACI,8BACI,0BAAUA,UAAU,iBAAiBuB,IAAMT,MAE/C,8BACI,wBAAQd,UAAU,aAAaK,QAAUW,EAAzC,4CC+DDQ,G,MAnFH,WAgDV,MAA4B5B,IAAMC,SAAS,IAA3C,mBAAOY,EAAP,KAAegB,EAAf,KAQML,EAAWxB,IAAMqB,aAAY,SAACS,GAAD,OAAWD,GAAU,SAACE,GAAD,OAAWD,GAAX,mBAAqBC,SAAQ,CAACF,IAKtF7B,IAAMgC,WAAW,WACfC,MACC,IAMH,IAAMA,EAAY,uCAAG,4BAAAC,EAAA,sEACDC,IAAMC,IAAI,gEADT,OACbC,EADa,OAEnBC,QAAQC,IAAIF,GACZR,GAAU,kBAAMQ,EAAIG,QAHD,2CAAH,qDAMlB,OACE,gCACE,cAAC,EAAD,CAAYhB,SAAWA,IACvB,cAAC,EAAD,CAAUX,OAASA,SCxEV4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.034c3ab3.chunk.js","sourcesContent":["import React from \"react\";\n\n\nconst Tweet = (props) => {\n\n  const [liked, setLiked] = React.useState(false);\n\n  const toggleLike = (callBackFunc) => {\n    setLiked( () => !liked );\n  }\n\n  return (\n    <div className=\"tweet\">\n      <div className=\"icon-container\">{ props.icon }</div>\n      <div className=\"body-container\">\n        <div className=\"status-display\">\n          <span className=\"displayName\">{ props.displayName }</span>\n          <span className=\"accountName\">@{ props.accountName }</span>\n        </div>\n        <div className=\"content\">{ props.content }</div>\n        <div className=\"status-icon\">\n          <span onClick={ toggleLike }>{ liked ? \"♥\" : \"♡\" }</span>\n        </div>\n      </div>\n    </div>\n  )\n\n}\n\nexport default Tweet;","import Tweet from \"./Tweet\";\n\nconst Timeline = (props) => {\n    const tweetList = props.tweets.map((tw) => {\n         return (\n            <Tweet\n                key={ tw.id }\n                icon={ tw.icon }\n                displayName={ tw.displayName }\n                accountName={ tw.accountName }\n                content={ tw.content }\n            />\n        )\n    }); // tweetList -> [<Tweet />, <Tweet />, <Tweet />]\n\n    return (\n        <div className=\"timeline\">{ tweetList }</div>\n    )\n\n\n}\n\nexport default Timeline;","import React from \"react\";\n\nconst TweetInput = (props) => {\n\n    const textareaRef = React.useRef(null);\n\n    const sendTweet = React.useCallback(() => {\n        if (textareaRef.current) {\n            if (textareaRef.current.value === \"\") return; // 空だったら実行しない\n            props.addTweet({\n                id: new Date().getTime(), // コンポーネントのidをuniqueに保つために時間をid にしておく（仮）\n                icon: \"🤶🏻\",\n                displayName: \"うめグミ\",\n                accountName: \"UmeGummy\",\n                content: textareaRef.current.value\n            });\n        }\n        textareaRef.current.value = \"\"; // 実行後は値を空にする\n    }, [textareaRef.current, props.addTweet]);\n\n    return (\n        <div className=\"tweet-input\">\n            <div>\n                <textarea className=\"tweet-textarea\" ref={ textareaRef } ></textarea>\n            </div>\n            <div>\n                <button className=\"send-tweet\" onClick={ sendTweet }>ツイート</button>\n            </div>\n        </div>\n    )\n\n}\n\nexport default TweetInput;","import React from \"react\";\nimport axios from \"axios\";\nimport Timeline from \"./views/commponents/Timeline\";\nimport TweetInput from \"./views/commponents/TweetInput\";\nimport './assets/css/style.css';\n\nconst App = () => {\n  // return (\n  //   <div>\n  //     <Tweet\n  //       icon=\"⛄\"\n  //       displayName=\"ゆきだるま\"\n  //       accountName=\"Yukidaruma\"\n  //       content=\"私の名前はゆきだるまです！よろしく！\"\n  //     />\n  //     <Tweet\n  //       icon=\"🎅\"\n  //       displayName=\"サンタ\"\n  //       accountName=\"Santa1225\"\n  //       content=\"クリスマスイブは忙しいぞ！！！！！！！！！！\"\n  //     />\n  //     <Tweet\n  //       icon=\"🎄\"\n  //       displayName=\"クリスマスツリー\"\n  //       accountName=\"ChristomasTree\"\n  //       content=\"木です\"\n  //     />\n  //   </div>\n  // )\n\n  // const tweets = [\n  //   {\n  //     id: 1,\n  //     icon: \"⛄\",\n  //     displayName: \"ゆきだるま\",\n  //     accountName: \"Yukidaruma\",\n  //     content: \"私の名前はゆきだるまです！よろしく！\"\n  //   },\n  //   {\n  //     id: 2,\n  //     icon: \"🎅\",\n  //     displayName: \"サンタ\",\n  //     accountName: \"Santa1225\",\n  //     content: \"クリスマスイブは忙しいぞ！！！！！！！！！！\"\n  //   },\n  //   {\n  //     id: 3,\n  //     icon: \"🎄\",\n  //     displayName: \"クリスマスツリー\",\n  //     accountName: \"ChristmasTree\",\n  //     content: \"木です\"\n  //   },\n  // ]\n\n  const [tweets, setTweets] = React.useState([]);\n\n  // const addTweet = React.useCallback( (tweet) => {\n  //   setTweets( (prev) => [tweet, ...prev] ),\n  //   [setTweets]\n  // });\n\n  // const addTweet = React.useCallback(引数１, 引数２);\n  const addTweet = React.useCallback((tweet) => setTweets((prev) => [tweet, ...prev]), [setTweets]);\n\n  // useEffectを使って最初の１回だけ実行する\n  // 第２引数の [] の中は、変化を監視したい変数を入れる。なければ空。\n  // => その値が変化したら、再び useEffect内の処理が呼び出される\n  React.useEffect( () => {\n    getAxiosDemo();\n  }, [] )\n\n\n  // 非同期通信でAPIを叩いてデータを取得する\n  // 取得したデータを setTweets を使って tweets を更新する\n\n  const getAxiosDemo = async () => {\n    const res = await axios.get(\"https://run.mocky.io/v3/fc2aa9ef-fea9-4381-9b59-e045f824cead\");\n    console.log(res);\n    setTweets(() => res.data);\n  }\n\n  return (\n    <div>\n      <TweetInput addTweet={ addTweet } />\n      <Timeline tweets={ tweets } />\n    </div>\n  )\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}